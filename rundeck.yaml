swagger: '2.0'
info:
  version: 1.0.0
  title: Rundeck
  license:
    name: MIT
basePath: '/api/23'
schemes:
- http
produces:
- application/json
consumes:
- application/json


paths:
  /user/list:
    get:
      produces:
        - 'application/json'
      summary: List user profiles
      operationId: listUsers
      tags:
      - user
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: { $ref: '#/definitions/User'} }

  /user/info:
    get:
      summary: Get same user profile data
      operationId: getUserProfile
      tags:
      - user
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}
    post:
      summary: Modify same user profile data
      operationId: modifyUserProfile
      tags:
      - user
      parameters:
      - in: body
        name: User
        description: New user profile data
        required: true
        schema: {$ref: '#/definitions/ModifyUserRequest'}
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}

  /user/info/{userID}:
    get:
      summary: Get another user's profile data
      operationId: getUserProfileByID
      tags:
      - user
      parameters:
      - name: userID
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}
    post:
      summary: Modify another user's profile data
      operationId: modifyUserProfileByID
      tags:
      - user
      parameters:
      - name: userID
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      - in: body
        name: User
        description: New user profile data
        required: true
        schema: {$ref: '#/definitions/ModifyUserRequest'}
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}

  /system/logstorage:
    get:
      summary: Get Log Storage information and stats
      operationId: getLogStorageInfo
      tags:
      - system
      - log
      responses:
        '200':
          description: Expected reponse to a valid request
          schema: {$ref: '#/definitions/LogStorage'}
  
  /system/logstorage/incomplete:
    get:
      summary: List all executions with incomplete log storage
      operationId: getIncompleteLogStorageExecutions
      tags:
      - system
      - execution
      - log
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/IncompleteLogExecutions'}
  
  /system/logstorage/incomplete/resume:
    post:
      summary: Resume processing incomplete Log Storage uploads
      operationId: resumeIncompleteLogStorageExecutions
      tags:
      - system
      - execution
      - log
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              resumed: {type: boolean}

  /system/executions/enable:
    post:
      summary: Enables executions, allowing adhoc and manual and scheduled jobs to be run
      operationId: enableExecutions
      tags:
      - system
      - execution
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              executionMode: {type: string}

  /system/executions/disable:
    post:
      summary: Disables executions, preventing adhoc and manual and scheduled jobs from running.
      operationId: disableExecutions
      tags:
      - system
      - execution
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              executionMode: {type: string}
  
  /scheduler/takeover:
    put:
      summary: Tell a Rundeck server in cluster mode to claim all scheduled jobs from another cluster server
      operationId:  takeoverJobs
      tags:
      - scheduler
      - cluster
      - job
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/TakeoverScheduleResponse'}

  /scheduler/server/{uuid}/jobs:
    get:
      summary: List the scheduled Jobs with their schedule owned by the cluster server with the specified UUID
      operationId: listScheduledJobsForServer
      tags:
      - scheduler
      - cluster
      - job
      parameters:
      - name: uuid
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /scheduler/jobs:
    get:
      summary: List the scheduled Jobs with their schedule owned by the cluster server
      operationId: listScheduledJobs
      tags:
      - scheduler
      - cluster
      - job
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /system/acl:
    get:
      summary: List ACL Policies
      operationId: listAclPolicies
      tags:
      - system
      - acl
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclList'}

  /system/acl/{policyName}:
    get:
      summary: Retrieve the YAML texas of the ACL Policy file
      operationId: getPolicyFile
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: true
        description: Policy file name
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclPolicyResponse'}
    post:  
      summary: Create a policy
      operationId: createPolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '201':
          description: Created
          schema: {$ref: '#/definitions/AclPolicyResponse'}
        '409':
          description: Conflict
        '400':
          description: Bad Request
          schema: {$ref: '#/definitions/InvalidAclPolicyResponse'}
    put:
      summary: Update policy
      operationId: updatePolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclPolicyResponse'}
        '404':
          description: Policy not found
    delete:
      summary: Delete policy
      operationId: deletePolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '204':
          description: Policy deleted
        '404':
          description: Policy not found

  /project/{project}/jobs:
    get:
      summary: List the jobs that exist for a project
      operationId: listProjectJobs
      tags:
      - project
      - job
      parameters:
      - name: project
        in: path
        required: True
        description: Project name
        type: string
      - name: idList
        in: query
        required: false
        description: Comma separated list of Job IDs to include
        type: string
      - name: groupPath
        in: query
        required: false
        description: Group or partial group path to include all jobs within that group path. Set to the special value "-" to match the top level jobs only.
        default: '*'
        type: string
      - name: jobFilter
        in: query
        required: false
        description: A filter for the job name. Matches any job name that contains this value.
        type: string
      - name: jobExactFilter
        in: query
        required: false
        description: An exact job name to match.
        type: string
      - name: groupPathExact
        in: query
        required: false
        description: An exact group path to match. Set to the special value "-" to match the top level jobs only.
        type: string
      - name: scheduledFilter
        in: query
        required: false
        description: Specify whether to return only scheduled or only not scheduled jobs.
        type: boolean
      - name: serverNodeUUIDFilter
        in: query
        required: false
        description: In cluster mode, use to select scheduled jobs assigned to the server with the given UUID.
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /job/{id}/executions:
    post:
      summary: Run the specified job
      operationId: runJob
      tags:
      - job
      - execution
      parameters:
      - name: id
        in: path
        required: True
        description: ID of job to run
        type: integer
      - name: request
        in: body
        required: false
        schema: {$ref: '#/definitions/ExecuteJobRequest'}
      responses:
        '200':
          description: Expected response for a valid request
          schema: {$ref: '#/definitions/ExecutionList'}
  
  /job/{jobID}/retry/{executionID}:
    post:
      summary: Retry a failed job execution on failed nodes only or on the same as the execution. This is the same functionality as the `Retry Failed Nodes ...` button on the execution page.
      operationId: retryJobExecution
      tags:
      - job
      - execution
      parameters:
      - name: jobID
        in: path
        required: true
        type: number
      - name: executionID
        in: path
        required: true
        type: integer
      - name: Request
        in: body
        required: false
        schema: {$ref: '#/definitions/RetryExecutionRequest'}
      responses:
        '200':
          description: Exected response to a valid request.
          schema: {$ref: '#/definitions/ExecutionList'}

  /project/{project}/jobs/export:
    get:
      summary: Export the job definitions in XML or YAML formats.
      operationId: exportJobs
      tags:
      - job
      - project
      parameters:
      - name: project
        in: path
        required: True
        description: The project to export jobs for.
        type: string
      - name: format
        in: query
        required: false
        description: XML or YAML format for exported jobs.
        type: string
        enum: ['xml', 'yaml']
        default: xml
      - name: idlist
        in: query
        required: false
        description: A comma-separated list of Job IDs to export.
        type: string
      - name: groupPath
        in: query
        required: false
        description: Group or partial group path to include all jobs within that group path.
        type: string
      - name: jobFilter
        in: query
        required: false
        description: Filter for the job Name.
        type: string
      responses:
        '200':
          description: Expected response to a valid request.
          schema: {type: string}

  /project/{project}/jobs/import:
    post:
      summary: Import job definitions in XML or YAML formats.
      operationId: importJobs
      tags:
      - job
      - project
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '200':
          description: Expected response to a valid request.
  
  /job/{id}:
    get:
      summary: Export a single job definition in XML or YAML formats.
      operationId: getJob
      tags:
      - job
      parameters:
      - name: id
        in: path
        required: True
        description: ID of the job to export.
        type: integer
      - name: format
        in: query
        required: false
        type: string
        enum: ['xml', 'yaml']
        default: xml
      responses:
        '200':
          description: Expected response to a valid request.
          schema:
            properties:
              content: {type: string}
    delete:
      summary: Delete a single job definition.
      operationId: deleteJob
      tags:
      - job
      parameters:
      - name: id
        in: path
        required: True
        description: ID of job to delete.
        type: number
      responses:
        '204':
          description: Job was deleted.
        '404':
          description: Job not found.

  /project/{project}/import:
    put:
      summary: Import project archive.
      operationId: importProjectArchive
      tags:
      - job
      - project
      consumes:
         - application/zip
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      - name: jobUuidOption
        in: query
        type: string
        enum: [preserve, remove]
        default: remove
      - name: importExecutions
        in: query
        type: boolean
      - name: importConfig
        in: query
        type: boolean
      - name: importACL
        in: query
        type: boolean
      - name: File
        in: body
        required: true
        x-ms-parameter-location: method 
        schema:
          type: object
          format: file
      responses:
        '200':
          description: Expected response to a valid request.

  /project/{project}/export:
    get:
      summary: Export archive of project synchronously
      operationId: projectArchiveExportSync
      produces:
      - application/zip
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      - name: executionIds
        in: query
        description: A list (comma-separated) of execution IDs. If this is specified then the archive will contain only executions that are specified, and will not contain Jobs, ACLs, or project configuration/readme files.
        type: string
      - name: exportAll
        in: query
        description: Export all project resources
        type: boolean
        default: true
      - name: exportJobs
        in: query
        description: Export all project resources
        type: boolean
      - name: exportExecutions
        in: query
        description: Export all project resources
        type: boolean
      - name: exportConfigs
        in: query
        description: Export all project resources
        type: boolean
      - name: exportReadmes
        in: query
        description: Export all project resources
        type: boolean
      - name: exportAcls
        in: query
        description: Export all project resources
        type: boolean
      responses:
        '200':
          description: Zip archive
          schema:
            type: object
            format: file

  /project/{project}/readme.md:
    get:
      summary: Get the readme.md contents
      operationId: projectGetReadme
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '200':
          description: readme.md contents
          schema:
            properties:
              contents: {type: string}
        '404':
          description: The file does not exist
    put:
      summary: Create or modify project README.md
      operationId: projectPutReadme
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      - name: Request
        in: body
        required: True
        schema:
          properties:
            contents: {type: string}
      responses:
        '200':
          description: Expected response to a valid request.
    delete:
      summary: Delete project README.md
      operationId: projectDeleteReadme
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '204':
          description: No Content

  /project/{project}/motd.md:
    get:
      summary: Get the readme.md contents
      operationId: projectGetMotd
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '200':
          description: motd.md contents
          schema:
            properties:
              contents: {type: string}
        '404':
          description: The file does not exist
    put:
      summary: Create or modify project MOTD.md
      operationId: projectPutMotd
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      - name: Request
        in: body
        required: True
        schema:
          properties:
            contents: {type: string}
      responses:
        '200':
          description: Expected response to a valid request.
    delete:
      summary: Delete project motd.md
      operationId: projectDeleteMotd
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '204':
          description: No Content

  /storage/keys/{path}:
    get:
      summary: List resources at the specified PATH
      description: |
        This enpoint is impossible to describe properly in OAPI 2.0 .  
        Depending on resources type and accepts header GET can return a list of key metadata,
        single metadata, or the key contents.
      operationId: storageKeyGet
      parameters:
      - name: path
        in: path
        required: True
        description: Key path
        type: string
        x-ms-skip-url-encoding: true
      - name: accept
        in: header
        type: string
        default: 'application/json'
      responses:
        '200':
          description: Content
          schema: {$ref: '#/definitions/StorageKeyListResponse'}
    delete:
      summary: Deletes the file if it exists and returns 204 response.
      operationId: storageKeyDelete
      parameters:
      - name: path
        in: path
        required: True
        description: Key path
        type: string
        x-ms-skip-url-encoding: true
      responses:
        '204':
          description: Content deleted


  # /jobs/delete:
  #   delete:
  #     summary: Delete multiple job definitions at once.
  #     operationId: deleteJobsBulk
  #     tags:
  #     - job
  #     parameters:
  #     - name: Request
  #       in: body
  #       required: True
  #       type:
  #         properties:
  #           ids:  {type: array, items: string}
  #           idList:
  #             description: Comma separated list of job IDs.
  #             type: string


definitions:
  $ref: definitions.yaml 